name: Heroku

on:
  pull_request:
    branches:
      - main  # Cambia según sea necesario

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Install Docker and Docker Compose
      - name: Install Docker and Docker Compose
        run: |
          sudo apt-get update
          if ! command -v docker &> /dev/null; then
            echo "Docker no encontrado. Instalando..."
            sudo apt-get install -y docker.io
          else
            echo "Docker ya está instalado."
          fi

          if ! command -v docker-compose &> /dev/null; then
            echo "Docker Compose no encontrado. Instalando..."
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          else
            echo "Docker Compose ya está instalado."
          fi

          docker --version
          docker-compose --version

      # Log in to Docker Hub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Asegúrate de que los secretos estén configurados
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker images using Docker Compose
      - name: Build and push Docker images with Docker Compose
        run: |
          docker-compose -f docker-compose.yml build
          docker-compose -f docker-compose.yml push
          # Verificar que las imágenes se enviaron correctamente
          echo "Verificando imágenes enviadas a DockerHub:"
          docker-compose -f docker-compose.yml images

  deploy-to-heroku:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository code (necesario para acceder a docker-compose.yml si se necesita)
      - name: Checkout code
        uses: actions/checkout@v3

      # Install Heroku CLI
      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          heroku --version  # Verificar la instalación

      # Ensure container stack for Heroku apps
      - name: Ensure container stack for Heroku apps
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |         
          heroku stack:set container -a back-app
          if [ $? -ne 0 ]; then
            echo "Error: Falló la configuración del stack container para back-app"
            exit 1
          fi

      # Log in to Heroku Container Registry
      - name: Log in to Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com
          if [ $? -ne 0 ]; then
            echo "Error: Falló la autenticación en Heroku Container Registry"
            exit 1
          fi

      # Pull images from DockerHub
      - name: Pull images from DockerHub
        run: |         
          docker pull sebastianwebapp/practica_grupal_4p_crud_mysql:latest
          if [ $? -ne 0 ]; then
            echo "Error: Falló la descarga de la imagen sebastianwebapp/practica_grupal_4p_crud_mysql:latest"
            exit 1
          fi   

      # Push backend image to Heroku
      - name: Push backend image to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          docker tag sebastianwebapp/practica_grupal_4p_crud_mysql:latest registry.heroku.com/back-app/web
          docker push registry.heroku.com/back-app/web
          if [ $? -ne 0 ]; then
            echo "Error: Falló el envío de la imagen backend a Heroku"
            exit 1
          fi
          heroku container:release web --app back-app
          if [ $? -ne 0 ]; then
            echo "Error: Falló la liberación del contenedor backend en Heroku"
            exit 1
          fi
